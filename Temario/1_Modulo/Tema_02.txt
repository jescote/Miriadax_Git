git init 
	•Transforma un directorio en un directorio de trabajo Git
	•Añadiendo el repositorio de commits al directorio, lo que lo convierte en un directorio de trabajo Git 
	•Lo añade en el subdirectorio oculto '.git' que contiene la base de datos donde guardar los commits

•Índice o área de cambios (staging area, index) 
	•Registro de cambios del directorio de trabajo a incluir en el próximo commit 
	•Los cambios no registrados en el índice no se incluyen al generar un nuevo commit 
	•Los ficheros no modificados del commit anterior permanecen en el siguiente commit

git add 
	•registra en el índice los ficheros indicados 
	•git add . 					registra en el índice todos los ficheros nuevos o modificados
	•git add LICENSE README.md 	registra los ficheros LICENSE README.md en el índice 

git reset 
	•extrae <ficheros> del índice  (deshace git add ..) 
	•git reset . 		extrae del índice todos los ficheros 
	•git reset LICENSE	extrae LICENSE del índice

git commit
	•Genera un nuevo commit con lo registrado en el índice 
	•git commit  -m "Descripción"   guarda nuevo commit con mensaje o título “Descripción"  
	•git commit 					guarda nuevo commit y abre un editor para crear mensaje del commit 
	•git commit --amend -m “....”   modifica el último commit con lo registrado en el índice !OJO cambia commit
									Uno de los casos más comunes en el que quieres deshacer cambios es cuando confirmas demasiado pronto y te olvidas de añadir algún archivo, o te confundes al introducir el mensaje de confirmación.
	•git commit -a 					Git prepara automáticamente todos los archivos rastreados antes de confirmarlos, ahorrándote el paso de git add.
	•asigna un identificador único a cada nuevo commit
	•El identificador actúa como nombre o referencia única del commit  
	•Ningún otro commit en ningún otro repositorio poseerá el mismo identificador 
	•Garantiza la integridad del commit: igualdad de identificadores implica igualdad de commits

•Identificador de commit 
	•Número hexadecimal de 40 dígitos generado como clave de hash SHA1 
	•Ejemplo de identificador:  973751d21c4a71f13a2e729ccf77f3a960885682  
	•Se suele utilizar el formato corto (formato largo es incómodo) 
	•7-8 dígitos iniciales (únicos en un proyecto):  973751d2 
	•Los comandos git permiten identificadores cortos o largos 

•Un commit se genera por modificación del commit anterior 
	•Añadiendo, eliminado o modificando ficheros del directorio de trabajo (y de sus subdir.) 
	•Git controla los cambios en los ficheros respecto al commit anterior

git log --oneline  muestra la historia de commits (e ids cortos) de una rama 

git status
	•muestra estado de los ficheros del directorio:  
		•modified:	modificados respecto al commit anterior 
		•untracked:	no existentes en el commit anterior 
		•staged:	registrados para el próximo commit 
	•git status -s: Muestra estado en formato compacto muy cómodo y conciso

git diff 
	•Mostrar diferencias en los ficheros modified respecto al commit anterior 
		•git diff: 				muestra los cambios en todos los ficheros modified del directorio de trabajo 
		•git diff README.md:	muestra solo los cambios en README.md, pero solo si es modified

	•Mostrar diferencias en los ficheros staged respecto al commit anterior 
		•git diff --cached: 			muestra los cambios en todos los ficheros staged del directorio de trabajo 
		•git diff --cached  README.md:	muestra solo los cambios en README.md, pero solo si es staged 

	•git diff nuestra las diferencias en las líneas del código: 
		•Líneas añadidas: 	en verde y comienzan por + 
		•Líneas eliminadas:	en rojo y comienzan por -

git rm <files> 
	•Borra <files> del directorio de trabajo y registra lo borrado en el índice 
	•git rm file1.js  file2.js borra file1.js y file2.js del directorio de trabajo y del índice 
	•git rm --cached  <files> borra <files> del índice, los ficheros pasan de staged a untracked 
		•git rm --cached   file1.js  file2.js borra file1.js y file2.js  solo del índice

git mv <old> <new> 
	•Cambia el nombre de un fichero en el directorio de trabajo (y en el índice) 
	•git mv file1.js file2.js cambia el nombre de file1.js a file2.js en el directorio de trabajo y en el índice

git checkout <files> (undo)
	•Elimina cambios de <files> que pasan a unmodified (Peligro! Cambios se pierden) 
		•git checkout  file1.js elimina los cambios del fichero modified file.js
		•git checkout . Elimina los cambios de todos los ficheros modified del directorio de trabajo que pasan a unmodified (Peligro! Cambios se pierden) 

Guardado rápido provisional STASH
Según se está trabajando en un apartado de un proyecto, normalmente el espacio de trabajo suele estar en un estado inconsistente. Pero puede que se necesite cambiar de rama durante un breve tiempo para ponerse a trabajar en algún otro tema urgente. Esto plantea el problema de confirmar cambios en un trabajo medio hecho, simplemente para poder volver a ese punto más tarde.

RESUMEN
=========================================
git stash   
	•Guarda en una pila las modificaciones del directorio de trabajo y en el índice, deja restaurados el directorio de trabajo y el índice, por ejemplo 
	•git stash guarda las modificaciones un la pila 

git stash list 
	•Lista el contenido de la pila de stashed 

git stash apply [<name>] [<options>] 
	•Aplica los cambios del último stash guardado, o los del stash llamado name, a los ficheros del area de trabajo y no actualiza el índice, excepto si se usa la opción —index. 
	•no elimina el stash aplicado de la pila. 

git stash drop [<name>] 
	•Elimina el último stash de la pila (o el indicado por name).

✦git stash pop [<name>] 
	•Aplica el último stash (o el indicado por name) y lo elimina de la pila.
=========================================

Este comando de guardado rápido (stashing) toma el estado del espacio de trabajo, con todas las modificaciones en los archivos bajo control de cambios, y lo guarda en una pila provisional. Desde allí, se podrán recuperar posteriormente y volverlas a aplicar de nuevo sobre el espacio de trabajo.
Guardando el trabajo temporalmente

Por ejemplo, si se está trabajando sobre un par de archivos e incluso uno de ellos está ya añadido al área de preparación para un futuro almacenamiento de sus cambios en el repositorio. Al lanzar el comando 'git status', se podría observar un estado inconsistente tal como:

$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#      modified:   index.html
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#
#      modified:   lib/simplegit.rb
#

Si justo en este momento se desea cambiar de rama, pero sin confirmar los cambios realizados hasta entonces; la solución es un guardado rápido provisional de los cambios. Utilizando el comando 'git stash' y enviando un nuevo grupo de cambios a la pila de guardado rápido:

$ git stash
Saved working directory and index state \
  "WIP on master: 049d078 added the index file"
HEAD is now at 049d078 added the index file
(To restore them type "git stash apply")

Con ello, se limpia el área de trabajo:

$ git status
# On branch master
nothing to commit, working directory clean

Y se permite cambiar de rama para ponerse a trabajar en cualquier otra parte. Con la tranquilidad de que los cambios a medio completar están guardados a buen recaudo en la pila de guardado rápido. Para ver el contenido de dicha pila, se emplea el comando 'git stash list':

$ git stash list
stash@{0}: WIP on master: 049d078 added the index file
stash@{1}: WIP on master: c264051... Revert "added file_size"
stash@{2}: WIP on master: 21d80a5... added number to log

En este ejemplo, se habian realizado dos guardados rápidos anteriores, por lo que se ven tres grupos de cambios guardados en la pila. Con el comando 'git stash apply', tal y como se indica en la salida del comando stash original, se pueden volver a aplicar los últimos cambios recien guardados. Si lo que se desea es reaplicar alguno de los grupos más antiguos de cambios, se ha de indicar expresamente: git stash apply stash@{2} Si no se indica ningún grupo concreto, Git asume que se desea reaplicar el grupo de cambios más reciente de entre los guardados en la pila.

$ git stash apply
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#
#      modified:   index.html
#      modified:   lib/simplegit.rb
#

Como se ve en la salida del comando, Git vueve a aplicar los correspondientes cambios en los archivos que estaban modificados. Pero no conserva la información de lo que estaba o no estaba añadido al área de preparación. En este ejemplo se han aplicado los cambios de vuelta sobre un espacio de trabajo limpio, en la misma rama. Pero no es esta la única situación en la que se pueden reaplicar cambios. Es perfectamente posible guardar rápidamente (stash) el estado de una rama. Cambiar posteriormente a otra rama. Y proceder a aplicar sobre esta otra rama los cambios guardados, en lugar de sobre la rama original. Es posible incluso aplicar de vuelta cambios sobre un espacio de trabajo inconsistente, donde haya otros cambios o algunos archivos añadidos al área de preparación. (Git notificará de los correspondientes conflictos de fusión si todo ello no se puede aplicar limpiamente.)

Las modificaciones sobre los archivos serán aplicadas; pero no así el estado de preparación. Para conseguir esto último, es necesario emplear la opción --index del comando git stash apply. Con ella se le indica que debe intentar reaplicar también el estado de preparación de los archivos. Y asi se puede conseguir volver exactamente al punto original:

$ git stash apply --index
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#      modified:   index.html
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#
#      modified:   lib/simplegit.rb
#

Los comandos git stash apply tan solo recuperan cambios almacenados en la pila de guardado rápido, sin afectar al estado de la pila. Es decir, los cambios siguen estando guardados en la pila. Para quitarlos de ahí, es necesario lanzar expresamente el comando git stash drop e indicar el número de guardado a borrar de la pila:

$ git stash list
stash@{0}: WIP on master: 049d078 added the index file
stash@{1}: WIP on master: c264051... Revert "added file_size"
stash@{2}: WIP on master: 21d80a5... added number to log
$ git stash drop stash@{0}
Dropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)

También es posible utilizar el comando git stash pop, que aplica cambios de un guardado y lo retira inmediatamente de la pila.
Creando una rama desde un guardado rápido temporal

Si se almacena rápidamente (stash) un cierto trabajo, se deja en la pila durante bastante tiempo, y se continua mientras tanto con otros trabajos sobre la misma rama. Es muy posible que se presenten problemas al tratar de reaplicar los cambios guardados tiempo atrás. Si para recuperar esos cambios se ha de modificar un archivo que también haya sido modificado en los trabajos posteriores, se dará un conflicto de fusión (merge conflict) y será preciso resolverlo manualmente. Una forma más sencilla de reaplicar cambios es utilizando el comando git stash branch. Este comando crea una nueva rama, extrayendo (checkout) la confirmación de cambios original en la que se estaba cuando los cambios fueron guardados en la pila, reaplica estos sobre dicha rama y los borra de la pila si se consigue completar el proceso con éxito.

$ git stash branch testchanges
Switched to a new branch "testchanges"
# On branch testchanges
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#      modified:   index.html
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#
#      modified:   lib/simplegit.rb
#
Dropped refs/stash@{0} (f0dfc4d5dc332d1cee34a634182e168c4efc3359)

Este es un buen atajo para recuperar con facilidad un cierto trabajo desde la pila y continuar con él en una nueva rama.

